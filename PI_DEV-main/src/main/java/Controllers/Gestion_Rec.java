package Controllers;

import Models.Reclamation;
import Models.typeR;
import Services.ReclamationService;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.Date;
import java.util.ResourceBundle;

public class Gestion_Rec implements Initializable {
    @FXML private TextArea descriptionField;
    @FXML private ComboBox<typeR> typeComboBox;
    @FXML private TextField coachIdField;
    @FXML private TextField adherentIdField;
    @FXML private DatePicker datePicker;
    @FXML private Button addButton;
    @FXML private Button updateButton;
    @FXML private Button deleteButton;
    @FXML private TableView<Reclamation> reclamationTable;
    @FXML private TableColumn<Reclamation, Integer> idColumn;
    @FXML private TableColumn<Reclamation, String> descriptionColumn;
    @FXML private TableColumn<Reclamation, typeR> typeColumn;
    @FXML private TableColumn<Reclamation, Integer> coachColumn;
    @FXML private TableColumn<Reclamation, Integer> adherentColumn;
    @FXML private TableColumn<Reclamation, Date> dateColumn;
    @FXML private TableColumn<Reclamation, Void> actionsColumn;
    @FXML private Button reponseNav;
    @FXML private Button clearButton;
    @FXML private Button refreshButton;

    private ReclamationService reclamationService;

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        try {
            reclamationService = new ReclamationService();
            typeComboBox.setItems(FXCollections.observableArrayList(typeR.values()));
            
            // Setup table columns
            setupTableColumns();
            
            loadReclamations();
            setupButtons();
            
            // Add navigation handler
            reponseNav.setOnAction(event -> {
                try {
                    Parent root = FXMLLoader.load(getClass().getResource("/Gestion_Rep.fxml"));
                    Stage stage = (Stage) reponseNav.getScene().getWindow();
                    stage.setScene(new Scene(root));
                    stage.show();
                } catch (IOException e) {
                    showAlert("Erreur", "Erreur de navigation: " + e.getMessage(), Alert.AlertType.ERROR);
                }
            });

            // Add refresh handler
            refreshButton.setOnAction(e -> loadReclamations());
            
            // Add clear form handler
            clearButton.setOnAction(e -> clearForm());
            
            // Add selection handler for table
            reclamationTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
                if (newSelection != null) {
                    populateForm(newSelection);
                }
            });
        } catch (Exception e) {
            showAlert("Erreur", "Erreur d'initialisation: " + e.getMessage(), Alert.AlertType.ERROR);
            e.printStackTrace();
        }
    }

    private void setupTableColumns() {
        idColumn.setCellValueFactory(new PropertyValueFactory<>("idReclamation"));
        descriptionColumn.setCellValueFactory(new PropertyValueFactory<>("description"));
        typeColumn.setCellValueFactory(new PropertyValueFactory<>("type"));
        coachColumn.setCellValueFactory(new PropertyValueFactory<>("id_coach"));
        adherentColumn.setCellValueFactory(new PropertyValueFactory<>("id_adherent"));
        dateColumn.setCellValueFactory(new PropertyValueFactory<>("date"));
    }

    private void loadReclamations() {
        try {
            reclamationTable.setItems(FXCollections.observableArrayList(reclamationService.getAll()));
            System.out.println(reclamationService.getAll());
        } catch (Exception e) {
            showAlert("Erreur", "Erreur lors du chargement des réclamations: " + e.getMessage(), Alert.AlertType.ERROR);
        }
    }

    private void setupButtons() {
        if (addButton != null) addButton.setOnAction(e -> handleAdd());
        if (updateButton != null) updateButton.setOnAction(e -> handleUpdate());
        if (deleteButton != null) deleteButton.setOnAction(e -> handleDelete());
        if (clearButton != null) clearButton.setOnAction(e -> clearForm());
    }

    private void handleAdd() {
        try {
            // Validate inputs
            if (!validateInputs()) {
                return;
            }

            // Create new Reclamation object
            Reclamation reclamation = new Reclamation(
                0, // ID will be generated by database
                descriptionField.getText(),
                typeComboBox.getValue(),
                Integer.parseInt(coachIdField.getText()),
                Integer.parseInt(adherentIdField.getText()),
                java.sql.Date.valueOf(datePicker.getValue())
            );

            // Save to database
            if (reclamationService.create(reclamation)) {
                showAlert("Succès", "Réclamation ajoutée avec succès", Alert.AlertType.INFORMATION);
                clearForm();
                loadReclamations();
            }
        } catch (Exception e) {
            showAlert("Erreur", "Erreur lors de l'ajout: " + e.getMessage(), Alert.AlertType.ERROR);
        }
    }

    private void handleUpdate() {
        try {
            Reclamation selected = reclamationTable.getSelectionModel().getSelectedItem();
            if (selected == null) {
                showAlert("Erreur", "Veuillez sélectionner une réclamation", Alert.AlertType.WARNING);
                return;
            }

            if (!validateInputs()) {
                return;
            }

            // Update selected reclamation
            selected.setDescription(descriptionField.getText());
            selected.setType(typeComboBox.getValue());
            selected.setId_coach(Integer.parseInt(coachIdField.getText()));
            selected.setId_adherent(Integer.parseInt(adherentIdField.getText()));
            selected.setDate(java.sql.Date.valueOf(datePicker.getValue()));

            reclamationService.update(selected);
            showAlert("Succès", "Réclamation mise à jour avec succès", Alert.AlertType.INFORMATION);
            clearForm();
            loadReclamations();
        } catch (Exception e) {
            showAlert("Erreur", "Erreur lors de la mise à jour: " + e.getMessage(), Alert.AlertType.ERROR);
        }
    }

    private void handleDelete() {
        try {
            Reclamation selected = reclamationTable.getSelectionModel().getSelectedItem();
            if (selected == null) {
                showAlert("Erreur", "Veuillez sélectionner une réclamation", Alert.AlertType.WARNING);
                return;
            }

            Alert confirmation = new Alert(Alert.AlertType.CONFIRMATION);
            confirmation.setTitle("Confirmation");
            confirmation.setContentText("Voulez-vous vraiment supprimer cette réclamation ?");
            
            confirmation.showAndWait().ifPresent(response -> {
                if (response == ButtonType.OK) {
                    try {
                        reclamationService.delete(selected.getIdReclamation());
                        showAlert("Succès", "Réclamation supprimée avec succès", Alert.AlertType.INFORMATION);
                        clearForm();
                        loadReclamations();
                    } catch (Exception e) {
                        showAlert("Erreur", "Erreur lors de la suppression: " + e.getMessage(), Alert.AlertType.ERROR);
                    }
                }
            });
        } catch (Exception e) {
            showAlert("Erreur", "Erreur lors de la suppression: " + e.getMessage(), Alert.AlertType.ERROR);
        }
    }

    private boolean validateInputs() {
        StringBuilder errors = new StringBuilder();

        if (descriptionField.getText().isEmpty()) {
            errors.append("Description est requise\n");
        }
        if (typeComboBox.getValue() == null) {
            errors.append("Type est requis\n");
        }
        if (coachIdField.getText().isEmpty() || !coachIdField.getText().matches("\\d+")) {
            errors.append("ID Coach doit être un nombre valide\n");
        }
        if (adherentIdField.getText().isEmpty() || !adherentIdField.getText().matches("\\d+")) {
            errors.append("ID Adherent doit être un nombre valide\n");
        }
        if (datePicker.getValue() == null) {
            errors.append("Date est requise\n");
        }

        if (errors.length() > 0) {
            showAlert("Erreur de validation", errors.toString(), Alert.AlertType.ERROR);
            return false;
        }
        return true;
    }

    private void populateForm(Reclamation reclamation) {
        descriptionField.setText(reclamation.getDescription());
        typeComboBox.setValue(reclamation.getType());
        coachIdField.setText(String.valueOf(reclamation.getId_coach()));
        adherentIdField.setText(String.valueOf(reclamation.getId_adherent()));
        datePicker.setValue(((java.sql.Date) reclamation.getDate()).toLocalDate());
    }

    private void clearForm() {
        descriptionField.clear();
        typeComboBox.setValue(null);
        coachIdField.clear();
        adherentIdField.clear();
        datePicker.setValue(null);
        reclamationTable.getSelectionModel().clearSelection();
    }

    private void showAlert(String title, String content, Alert.AlertType type) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setContentText(content);
        alert.showAndWait();
    }
}
